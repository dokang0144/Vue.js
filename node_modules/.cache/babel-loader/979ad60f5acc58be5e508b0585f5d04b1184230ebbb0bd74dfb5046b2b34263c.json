{"ast":null,"code":"export default {\n  data() {\n    //변수생성\n    return {\n      requestBody: {},\n      //리스트 페이지 데이터전송\n      list: {},\n      //리스트 데이터\n      no: '',\n      //게시판 숫자처리\n      idx: this.$route.query.idx,\n      idx: ''\n    };\n  },\n  mounted() {\n    this.fnGetList();\n  },\n  methods: {\n    fnGetList() {\n      this.requestBody = {\n        // 데이터 전송\n        keyword: this.keyword,\n        page: this.page,\n        size: this.size\n      };\n      this.$axios.get(this.$serverUrl + \"/comment/list\", {\n        params: this.requestBody,\n        headers: {}\n      }).then(res => {\n        this.list = res.data.filter(board => board.board == this.idx); //서버에서 데이터를 목록으로 보내므로 바로 할당하여 사용할 수 있다.\n      }).catch(err => {\n        if (err.message.indexOf('Network Error') > -1) {\n          alert('네트워크가 원활하지 않습니다.\\n잠시 후 다시 시도해주세요.');\n        }\n      });\n    },\n    fnSave() {\n      let apiUrl = this.$serverUrl + '/list';\n      this.form = {\n        \"idx\": this.idx,\n        \"user_name\": this.user_name,\n        \"comment\": this.comment,\n        \"board\": this.board\n      };\n      if (this.idx === undefined) {\n        //INSERT\n        this.$axios.post(apiUrl, this.form).then(res => {\n          alert('글이 저장되었습니다.');\n          this.fnView(res.data.idx);\n        }).catch(err => {\n          if (err.message.indexOf('Network Error') > -1) {\n            alert('네트워크가 원활하지 않습니다.\\n잠시 후 다시 시도해주세요.');\n          }\n        });\n      }\n    }\n  }\n};","map":{"version":3,"names":["data","requestBody","list","no","idx","$route","query","mounted","fnGetList","methods","keyword","page","size","$axios","get","$serverUrl","params","headers","then","res","filter","board","catch","err","message","indexOf","alert","fnSave","apiUrl","form","user_name","comment","undefined","post","fnView"],"sources":["C:\\Users\\LENOVO\\Documents\\GitHub\\Vue.js\\src\\views\\board\\BoardComment.vue"],"sourcesContent":["<template>\r\n  <div class=\"board-list\">\r\n    <div style=\"border-bottom: 2px solid #92D050; height: 50px;\">\r\n      <p style=\"float:left; padding: 0 10px 0\">전체 댓글 <a style=\"color: dodgerblue;\">{{ list.length }}</a>개</p>\r\n    </div>\r\n\r\n    <ul className=\"w3-ul\">\r\n      <li v-for=\"(row, idx) in list\" :key=\"idx\" style=\"border-bottom: 1px solid #D9D9D9\">\r\n        <div style=\"float: left; width: 150px;\">{{ row.user_name }}</div>\r\n        <div>{{ row.comment }}</div>\r\n      </li>\r\n    </ul>\r\n    <br>\r\n  </div>\r\n\r\n  <div style=\"text-align: center; border: solid 2px #E9E5E1; width: 700px; padding: 10px; margin: auto\">\r\n    <input type=\"text\" style=\"width: 550px; height: 40px; outline: none; border: 0 solid black\" v-model=\"newComment\"\r\n           placeholder=\"댓글을 남겨주세요.\">&nbsp;\r\n    <button type=\"button\" className=\"w3-button w3-green\" v-on:click=\"temp\" style=\"height: 40px\">댓글쓰기</button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() { //변수생성\r\n    return {\r\n      requestBody: {}, //리스트 페이지 데이터전송\r\n      list: {}, //리스트 데이터\r\n      no: '', //게시판 숫자처리\r\n      idx: this.$route.query.idx,\r\n\r\n      idx: '',\r\n      \r\n    }\r\n  },\r\n  mounted() {\r\n    this.fnGetList()\r\n  },\r\n  methods: {\r\n    fnGetList() {\r\n      this.requestBody = { // 데이터 전송\r\n        keyword: this.keyword,\r\n        page: this.page,\r\n        size: this.size\r\n      }\r\n\r\n      this.$axios.get(this.$serverUrl + \"/comment/list\", {\r\n        params: this.requestBody,\r\n        headers: {}\r\n      }).then((res) => {\r\n          this.list = res.data.filter((board) => board.board == this.idx)  //서버에서 데이터를 목록으로 보내므로 바로 할당하여 사용할 수 있다.\r\n      }).catch((err) => {\r\n        if (err.message.indexOf('Network Error') > -1) {\r\n          alert('네트워크가 원활하지 않습니다.\\n잠시 후 다시 시도해주세요.')\r\n        }\r\n      })\r\n    },\r\n\r\n    fnSave() {\r\n      let apiUrl = this.$serverUrl + '/list'\r\n      this.form = {\r\n        \"idx\": this.idx,\r\n        \"user_name\": this.user_name,\r\n        \"comment\": this.comment,\r\n        \"board\": this.board\r\n      }\r\n\r\n      if (this.idx === undefined) {\r\n        //INSERT\r\n        this.$axios.post(apiUrl, this.form)\r\n            .then((res) => {\r\n              alert('글이 저장되었습니다.')\r\n              this.fnView(res.data.idx)\r\n            }).catch((err) => {\r\n          if (err.message.indexOf('Network Error') > -1) {\r\n            alert('네트워크가 원활하지 않습니다.\\n잠시 후 다시 시도해주세요.')\r\n          }\r\n        })\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>"],"mappings":"AAuBA,eAAe;EACbA,IAAIA,CAAA,EAAG;IAAE;IACP,OAAO;MACLC,WAAW,EAAE,CAAC,CAAC;MAAE;MACjBC,IAAI,EAAE,CAAC,CAAC;MAAE;MACVC,EAAE,EAAE,EAAE;MAAE;MACRC,GAAG,EAAE,IAAI,CAACC,MAAM,CAACC,KAAK,CAACF,GAAG;MAE1BA,GAAG,EAAE;IAEP;EACF,CAAC;EACDG,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,SAAS,EAAC;EACjB,CAAC;EACDC,OAAO,EAAE;IACPD,SAASA,CAAA,EAAG;MACV,IAAI,CAACP,WAAU,GAAI;QAAE;QACnBS,OAAO,EAAE,IAAI,CAACA,OAAO;QACrBC,IAAI,EAAE,IAAI,CAACA,IAAI;QACfC,IAAI,EAAE,IAAI,CAACA;MACb;MAEA,IAAI,CAACC,MAAM,CAACC,GAAG,CAAC,IAAI,CAACC,UAAS,GAAI,eAAe,EAAE;QACjDC,MAAM,EAAE,IAAI,CAACf,WAAW;QACxBgB,OAAO,EAAE,CAAC;MACZ,CAAC,CAAC,CAACC,IAAI,CAAEC,GAAG,IAAK;QACb,IAAI,CAACjB,IAAG,GAAIiB,GAAG,CAACnB,IAAI,CAACoB,MAAM,CAAEC,KAAK,IAAKA,KAAK,CAACA,KAAI,IAAK,IAAI,CAACjB,GAAG,GAAG;MACrE,CAAC,CAAC,CAACkB,KAAK,CAAEC,GAAG,IAAK;QAChB,IAAIA,GAAG,CAACC,OAAO,CAACC,OAAO,CAAC,eAAe,IAAI,CAAC,CAAC,EAAE;UAC7CC,KAAK,CAAC,mCAAmC;QAC3C;MACF,CAAC;IACH,CAAC;IAEDC,MAAMA,CAAA,EAAG;MACP,IAAIC,MAAK,GAAI,IAAI,CAACb,UAAS,GAAI,OAAM;MACrC,IAAI,CAACc,IAAG,GAAI;QACV,KAAK,EAAE,IAAI,CAACzB,GAAG;QACf,WAAW,EAAE,IAAI,CAAC0B,SAAS;QAC3B,SAAS,EAAE,IAAI,CAACC,OAAO;QACvB,OAAO,EAAE,IAAI,CAACV;MAChB;MAEA,IAAI,IAAI,CAACjB,GAAE,KAAM4B,SAAS,EAAE;QAC1B;QACA,IAAI,CAACnB,MAAM,CAACoB,IAAI,CAACL,MAAM,EAAE,IAAI,CAACC,IAAI,EAC7BX,IAAI,CAAEC,GAAG,IAAK;UACbO,KAAK,CAAC,aAAa;UACnB,IAAI,CAACQ,MAAM,CAACf,GAAG,CAACnB,IAAI,CAACI,GAAG;QAC1B,CAAC,CAAC,CAACkB,KAAK,CAAEC,GAAG,IAAK;UACpB,IAAIA,GAAG,CAACC,OAAO,CAACC,OAAO,CAAC,eAAe,IAAI,CAAC,CAAC,EAAE;YAC7CC,KAAK,CAAC,mCAAmC;UAC3C;QACF,CAAC;MACH;IACF;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}