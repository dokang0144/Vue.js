{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { mapGetters } from 'vuex';\nimport jwt_decode from \"jwt-decode\";\nexport default {\n  ...mapGetters(['getUser']),\n  author() {\n    return this.getUser.name; // 작성자 필드에 사용자 이름 할당\n  },\n\n  data() {\n    //변수생성\n    return {\n      requestBody: this.$route.query,\n      idx: this.$route.query.idx,\n      title: '',\n      author: '',\n      contents: '',\n      created_at: '',\n      user_name: ''\n    };\n  },\n  mounted() {\n    this.user_name = localStorage.getItem('userName');\n    this.author = this.user_name;\n    this.fnGetView();\n  },\n  created() {\n    const token = localStorage.getItem(\"user_token\");\n    if (token) {\n      const decoded = jwt_decode(token);\n      this.user_name = decoded;\n    }\n  },\n  methods: {\n    fnGetView() {\n      if (this.idx !== undefined) {\n        this.$axios.get(this.$serverUrl + '/board/' + this.idx, {\n          params: this.requestBody\n        }).then(res => {\n          this.title = res.data.title;\n          this.author = res.data.author;\n          this.contents = res.data.contents;\n          this.created_at = res.data.created_at;\n        }).catch(err => {\n          console.log(err);\n        });\n      }\n    },\n    fnList() {\n      delete this.requestBody.idx;\n      this.$router.push({\n        path: './list',\n        query: this.requestBody\n      });\n    },\n    fnView(idx) {\n      this.requestBody.idx = idx;\n      this.$router.push({\n        path: './detail',\n        query: this.requestBody\n      });\n    },\n    fnSave() {\n      let apiUrl = this.$serverUrl + '/board';\n      this.form = {\n        \"idx\": this.idx,\n        \"title\": this.title,\n        \"contents\": this.contents,\n        \"author\": this.author\n      };\n      if (!this.title) {\n        alert('제목을 입력해주세요.');\n        this.$refs.titleInput.focus();\n        return;\n      }\n      if (this.idx === undefined) {\n        //INSERT\n        this.$axios.post(apiUrl, this.form).then(res => {\n          alert('글이 저장되었습니다.');\n          this.fnView(res.data.idx);\n        }).catch(err => {\n          if (err.message.indexOf('Network Error') > -1) {\n            alert('네트워크가 원활하지 않습니다.\\n잠시 후 다시 시도해주세요.');\n          }\n        });\n      } else {\n        //UPDATE\n        this.$axios.patch(apiUrl, this.form).then(res => {\n          alert('글이 저장되었습니다.');\n          this.fnView(res.data.idx);\n        }).catch(err => {\n          if (err.message.indexOf('Network Error') > -1) {\n            alert('네트워크가 원활하지 않습니다.\\n잠시 후 다시 시도해주세요.');\n          }\n        });\n      }\n    }\n  }\n};","map":{"version":3,"names":["mapGetters","jwt_decode","author","getUser","name","data","requestBody","$route","query","idx","title","contents","created_at","user_name","mounted","localStorage","getItem","fnGetView","created","token","decoded","methods","undefined","$axios","get","$serverUrl","params","then","res","catch","err","console","log","fnList","$router","push","path","fnView","fnSave","apiUrl","form","alert","$refs","titleInput","focus","post","message","indexOf","patch"],"sources":["C:\\Users\\LENOVO\\Documents\\GitHub\\Vue.js\\src\\views\\board\\BoardWrite.vue"],"sourcesContent":["<template>\r\n  <div class=\"board-detail\">\r\n    <div class=\"common-buttons\">\r\n      <button type=\"button\" class=\"w3-button w3-round w3-blue-gray\" v-on:click=\"fnSave\">저장</button>&nbsp;\r\n      <button type=\"button\" class=\"w3-button w3-round w3-gray\" v-on:click=\"fnList\">목록</button>\r\n    </div>\r\n    <div class=\"board-contents\">\r\n      <input type=\"text\" ref=\"titleInput\" v-model=\"title\" class=\"w3-input w3-border\" placeholder=\"제목을 입력해주세요.\">\r\n      <a style=\"font-size: 1px\"><br></a>작성자: {{ user_name.userId }}\r\n    </div>\r\n    <div class=\"board-contents\">\r\n      <textarea id=\"\" cols=\"30\" rows=\"10\" v-model=\"contents\" class=\"w3-input w3-border\" style=\"resize: none;\">\r\n      </textarea>\r\n    </div>\r\n    <div class=\"common-buttons\">\r\n      <button type=\"button\" class=\"w3-button w3-round w3-blue-gray\" v-on:click=\"fnSave\">저장</button>&nbsp;\r\n      <button type=\"button\" class=\"w3-button w3-round w3-gray\" v-on:click=\"fnList\">목록</button>\r\n    </div>\r\n  </div>\r\n\r\n  <div style=\"width: 100%; bottom: 0; position: absolute; height: 25%;\">\r\n    <hr/>\r\n    <footer>\r\n      여기는 footer 자리입니다.\r\n    </footer>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapGetters } from 'vuex'\r\nimport jwt_decode from \"jwt-decode\";\r\n\r\n\r\nexport default {\r\n  ...mapGetters(['getUser']),\r\n  author() {\r\n    return this.getUser.name // 작성자 필드에 사용자 이름 할당\r\n  },\r\n  data() { //변수생성\r\n    return {\r\n      requestBody: this.$route.query,\r\n      idx: this.$route.query.idx,\r\n\r\n      title: '',\r\n      author: '',\r\n      contents: '',\r\n      created_at: '',\r\n\r\n      user_name: ''\r\n    }\r\n  },\r\n  mounted() {\r\n    this.user_name = localStorage.getItem('userName')\r\n    this.author = this.user_name\r\n    this.fnGetView()\r\n  },\r\n  created() {\r\n    const token = localStorage.getItem(\"user_token\");\r\n    if (token) {\r\n      const decoded = jwt_decode(token);\r\n      this.user_name = decoded;\r\n    }\r\n  },\r\n  methods: {\r\n    fnGetView() {\r\n      if (this.idx !== undefined) {\r\n        this.$axios.get(this.$serverUrl + '/board/' + this.idx, {\r\n          params: this.requestBody\r\n        }).then((res) => {\r\n          this.title = res.data.title\r\n          this.author = res.data.author\r\n          this.contents = res.data.contents\r\n          this.created_at = res.data.created_at\r\n        }).catch((err) => {\r\n          console.log(err)\r\n        })\r\n      }\r\n    },\r\n    fnList() {\r\n      delete this.requestBody.idx\r\n      this.$router.push({\r\n        path: './list',\r\n        query: this.requestBody\r\n      })\r\n    },\r\n    fnView(idx) {\r\n      this.requestBody.idx = idx\r\n      this.$router.push({\r\n        path: './detail',\r\n        query: this.requestBody\r\n      })\r\n    },\r\n    fnSave() {\r\n      let apiUrl = this.$serverUrl + '/board'\r\n      this.form = {\r\n        \"idx\": this.idx,\r\n        \"title\": this.title,\r\n        \"contents\": this.contents,\r\n        \"author\": this.author\r\n      }\r\n\r\n      if (!this.title) {\r\n        alert('제목을 입력해주세요.')\r\n        this.$refs.titleInput.focus()\r\n        return\r\n      }\r\n\r\n      if (this.idx === undefined) {\r\n        //INSERT\r\n        this.$axios.post(apiUrl, this.form)\r\n            .then((res) => {\r\n              alert('글이 저장되었습니다.')\r\n              this.fnView(res.data.idx)\r\n            }).catch((err) => {\r\n          if (err.message.indexOf('Network Error') > -1) {\r\n            alert('네트워크가 원활하지 않습니다.\\n잠시 후 다시 시도해주세요.')\r\n          }\r\n        })\r\n      } else {\r\n        //UPDATE\r\n        this.$axios.patch(apiUrl, this.form)\r\n            .then((res) => {\r\n              alert('글이 저장되었습니다.')\r\n              this.fnView(res.data.idx)\r\n            }).catch((err) => {\r\n          if (err.message.indexOf('Network Error') > -1) {\r\n            alert('네트워크가 원활하지 않습니다.\\n잠시 후 다시 시도해주세요.')\r\n          }\r\n        })\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n<style scoped>\r\n\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}