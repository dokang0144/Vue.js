{"ast":null,"code":"export default {\n  data() {\n    //변수생성\n    return {\n      requestBody: {},\n      //리스트 페이지 데이터전송\n      list: {},\n      //리스트 데이터\n      replies: {},\n      //댓글 데이터\n      no: '',\n      //게시판 숫자처리\n      idx: this.$route.query.idx,\n      clickedCommentIdx: null,\n      // initialize to null\n\n      user_name: '',\n      comment: '',\n      board: '',\n      show: false\n    };\n  },\n  mounted() {\n    this.show = true;\n    this.fnGetList();\n    this.fnGetReplies();\n  },\n  methods: {\n    toggleReplyForm(idx) {\n      this.list[idx].showReply = !this.list[idx].showReply; // showReply 속성의 값을 반대로 변경하여 대댓글 폼을 보이거나 숨기도록 함\n    },\n\n    fnGetList() {\n      this.requestBody = {\n        // 데이터 전송\n        keyword: this.keyword,\n        page: this.page,\n        size: this.size\n      };\n      this.$axios.get(this.$serverUrl + \"/comment/list\", {\n        params: this.requestBody,\n        headers: {}\n      }).then(res => {\n        this.list = res.data.filter(board => board.board == this.clickedCommentIdx); //서버에서 데이터를 목록으로 보내므로 바로 할당하여 사용할 수 있다.\n      }).catch(err => {\n        if (err.message.indexOf('Network Error') > -1) {\n          alert('네트워크가 원활하지 않습니다.\\n잠시 후 다시 시도해주세요.');\n        }\n      });\n    },\n    fnGetReplies() {\n      this.$axios.get(this.$serverUrl + \"/replies/list\", {}).then(res => {\n        this.replies = res.data.filter(replies => replies.replies == this.idx); //서버에서 데이터를 목록으로 보내므로 바로 할당하여 사용할 수 있다.\n      }).catch(err => {\n        if (err.message.indexOf('Network Error') > -1) {\n          alert('네트워크가 원활하지 않습니다.\\n잠시 후 다시 시도해주세요.');\n        }\n      });\n    },\n    fnSave() {\n      if (!this.comment) {\n        alert('댓글을 입력해주세요.');\n        this.$refs.commentInput.focus();\n        return;\n      }\n      let apiUrl = this.$serverUrl + '/comment';\n      this.user_name = prompt(\"이름을 입력해주세요.\");\n      this.form = {\n        \"user_name\": this.user_name,\n        \"comment\": this.comment,\n        \"board\": this.idx\n      };\n      if (!this.user_name) {\n        alert('이름을 입력해주세요.');\n        return;\n      }\n\n      //INSERT\n      this.$axios.post(apiUrl, this.form).then(() => {\n        alert('댓글이 저장되었습니다.');\n        window.location.reload();\n      }).catch(err => {\n        if (err.message.indexOf('Network Error') > -1) {\n          alert('네트워크가 원활하지 않습니다.\\n잠시 후 다시 시도해주세요.');\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["data","requestBody","list","replies","no","idx","$route","query","clickedCommentIdx","user_name","comment","board","show","mounted","fnGetList","fnGetReplies","methods","toggleReplyForm","showReply","keyword","page","size","$axios","get","$serverUrl","params","headers","then","res","filter","catch","err","message","indexOf","alert","fnSave","$refs","commentInput","focus","apiUrl","prompt","form","post","window","location","reload"],"sources":["C:\\Users\\LENOVO\\Documents\\GitHub\\Vue.js\\src\\views\\board\\BoardComment.vue"],"sourcesContent":["<template>\r\n  <Transition duration=\"550\" name=\"nested\">\r\n  <div className=\"board-list\">\r\n    <div style=\"border-bottom: 2px solid #92D050; height: 50px;\" v-if=\"show\" id=\"outer\">\r\n      <p style=\"float:left; padding: 0 10px 0\" id=\"inner\">전체 댓글 <a style=\"color: dodgerblue;\">{{ list.length }}</a>개</p>\r\n    </div>\r\n\r\n    <ul className=\"w3-ul\" v-if=\"show\" id=\"inner\">\r\n      <li v-for=\"(row, idx) in list\" :key=\"idx\" style=\"border-bottom: 1px solid #D9D9D9\">\r\n        <div style=\"float: left; width: 150px;\">{{ row.user_name }}</div>\r\n        <div style=\"margin-right: 0; cursor: pointer\" @click=\"toggleReplyForm(idx)\">{{ row.comment }}</div>\r\n        <div v-if=\"row.showReply\">\r\n\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    <br>\r\n\r\n    <div style=\"text-align: center; border: solid 2px #E9E5E1; width: 700px; padding: 10px; margin: auto\" >\r\n      <form v-on:submit.prevent=\"fnSave\">\r\n        <input ref=\"commentInput\" v-model=\"comment\" placeholder=\"댓글을 남겨주세요.\"\r\n               style=\"width: 550px; height: 40px; outline: none; border: 0 solid black\"\r\n               type=\"text\" id=\"inner\">&nbsp;\r\n        <button className=\"w3-button w3-green\" style=\"height: 40px\" type=\"submit\" id=\"inner\">댓글쓰기</button>\r\n      </form>\r\n    </div><br>\r\n  </div>\r\n  </Transition>\r\n</template>\r\n\r\n<script>\r\n\r\nexport default {\r\n  data() { //변수생성\r\n    return {\r\n      requestBody: {}, //리스트 페이지 데이터전송\r\n      list: {}, //리스트 데이터\r\n      replies: {}, //댓글 데이터\r\n      no: '', //게시판 숫자처리\r\n      idx: this.$route.query.idx,\r\n      clickedCommentIdx: null, // initialize to null\r\n\r\n      user_name: '',\r\n      comment: '',\r\n      board: '',\r\n      show: false\r\n    }\r\n  },\r\n  mounted() {\r\n    this.show = true;\r\n    this.fnGetList()\r\n    this.fnGetReplies()\r\n  },\r\n  methods: {\r\n    toggleReplyForm(idx) {\r\n      this.list[idx].showReply = !this.list[idx].showReply; // showReply 속성의 값을 반대로 변경하여 대댓글 폼을 보이거나 숨기도록 함\r\n    },\r\n    fnGetList() {\r\n      this.requestBody = { // 데이터 전송\r\n        keyword: this.keyword,\r\n        page: this.page,\r\n        size: this.size\r\n      }\r\n\r\n      this.$axios.get(this.$serverUrl + \"/comment/list\", {\r\n        params: this.requestBody,\r\n        headers: {}\r\n      }).then((res) => {\r\n        this.list = res.data.filter((board) => board.board == this.clickedCommentIdx)  //서버에서 데이터를 목록으로 보내므로 바로 할당하여 사용할 수 있다.\r\n      }).catch((err) => {\r\n        if (err.message.indexOf('Network Error') > -1) {\r\n          alert('네트워크가 원활하지 않습니다.\\n잠시 후 다시 시도해주세요.')\r\n        }\r\n      })\r\n    },\r\n    fnGetReplies() {\r\n      this.$axios.get(this.$serverUrl + \"/replies/list\", {\r\n      }).then((res) => {\r\n        this.replies = res.data.filter((replies) => replies.replies == this.idx)  //서버에서 데이터를 목록으로 보내므로 바로 할당하여 사용할 수 있다.\r\n      }).catch((err) => {\r\n        if (err.message.indexOf('Network Error') > -1) {\r\n          alert('네트워크가 원활하지 않습니다.\\n잠시 후 다시 시도해주세요.')\r\n        }\r\n      })\r\n    },\r\n    fnSave() {\r\n\r\n      if (!this.comment) {\r\n        alert('댓글을 입력해주세요.')\r\n        this.$refs.commentInput.focus()\r\n        return\r\n      }\r\n\r\n      let apiUrl = this.$serverUrl + '/comment'\r\n      this.user_name = prompt(\"이름을 입력해주세요.\");\r\n      this.form = {\r\n        \"user_name\": this.user_name,\r\n        \"comment\": this.comment,\r\n        \"board\": this.idx\r\n      }\r\n\r\n      if (!this.user_name) {\r\n        alert('이름을 입력해주세요.')\r\n        return\r\n      }\r\n\r\n      //INSERT\r\n      this.$axios.post(apiUrl, this.form)\r\n          .then(() => {\r\n            alert('댓글이 저장되었습니다.')\r\n            window.location.reload()\r\n          })\r\n          .catch((err) => {\r\n            if (err.message.indexOf('Network Error') > -1) {\r\n              alert('네트워크가 원활하지 않습니다.\\n잠시 후 다시 시도해주세요.')\r\n            }\r\n          })\r\n    },\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n.nested-enter-active, .nested-leave-active {\r\n  transition: all 0.3s ease-in-out;\r\n}\r\n/* delay leave of parent element */\r\n.nested-leave-active {\r\n  transition-delay: 0.25s;\r\n}\r\n\r\n.nested-enter-from,\r\n.nested-leave-to {\r\n  transform: translateY(30px);\r\n  opacity: 0;\r\n}\r\n\r\n/* we can also transition nested elements using nested selectors */\r\n.nested-enter-active #inner,\r\n.nested-leave-active #inner {\r\n  transition: all 0.3s ease-in-out;\r\n}\r\n/* delay enter of nested element */\r\n.nested-enter-active #inner {\r\n  transition-delay: 0.25s;\r\n}\r\n\r\n.nested-enter-from #inner,\r\n.nested-leave-to #inner {\r\n  transform: translateX(30px);\r\n  opacity: 0.001;\r\n}\r\n\r\n.v-enter-active,\r\n.v-leave-active {\r\n  transition: opacity 0.5s ease;\r\n}\r\n\r\n.v-enter-from,\r\n.v-leave-to {\r\n  opacity: 0;\r\n}\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}