{"ast":null,"code":"import { USER_ID, IS_AUTH, ERROR_STATE } from './mutation_types';\nimport loginAPI from '../service/loginAPI';\nlet setUserId = ({\n  commit\n}, data) => {\n  commit(USER_ID, data);\n};\nlet setErrorState = ({\n  commit\n}, data) => {\n  commit(ERROR_STATE, data);\n};\nlet setIsAuth = ({\n  commit\n}, data) => {\n  commit(IS_AUTH, data);\n};\n\n// 백엔드에서 반환한 결과값을 가지고 로그인 성공 실패 여부를 vuex에 넣어준다.\nlet processResponse = (store, loginResponse) => {\n  switch (loginResponse) {\n    case 'notFound':\n      setErrorState(store, 'Wrong ID or Password');\n      setIsAuth(store, false);\n      break;\n    default:\n      setUserId(store, loginResponse.user_id);\n      setErrorState(store, '');\n      setIsAuth(store, true);\n  }\n};\nexport default {\n  async login(store, {\n    user_id,\n    user_pw\n  }) {\n    let loginResponse = await loginAPI.doLogin(user_id, user_pw);\n    processResponse(store, loginResponse);\n    return store.getters.getIsAuth; // 로그인 결과를 리턴한다\n  }\n};","map":{"version":3,"names":["USER_ID","IS_AUTH","ERROR_STATE","loginAPI","setUserId","commit","data","setErrorState","setIsAuth","processResponse","store","loginResponse","user_id","login","user_pw","doLogin","getters","getIsAuth"],"sources":["C:/Users/yjjyk/Documents/GitHub/Vue.js/src/vuex/actions.js"],"sourcesContent":["import {USER_ID, IS_AUTH, ERROR_STATE} from './mutation_types'\r\nimport loginAPI from '../service/loginAPI'\r\n\r\nlet setUserId = ({commit}, data) => {\r\n    commit(USER_ID, data)\r\n}\r\n\r\nlet setErrorState = ({commit}, data) => {\r\n    commit(ERROR_STATE, data)\r\n}\r\n\r\nlet setIsAuth = ({commit}, data) => {\r\n    commit(IS_AUTH, data)\r\n}\r\n\r\n// 백엔드에서 반환한 결과값을 가지고 로그인 성공 실패 여부를 vuex에 넣어준다.\r\nlet processResponse = (store, loginResponse) => {\r\n    switch (loginResponse) {\r\n        case 'notFound':\r\n            setErrorState(store, 'Wrong ID or Password')\r\n            setIsAuth(store, false)\r\n            break\r\n        default:\r\n            setUserId(store, loginResponse.user_id)\r\n            setErrorState(store, '')\r\n            setIsAuth(store, true)\r\n    }\r\n}\r\n\r\nexport default {\r\n    async login (store, {user_id, user_pw}) {\r\n        let loginResponse = await loginAPI.doLogin(user_id, user_pw)\r\n        processResponse(store, loginResponse)\r\n        return store.getters.getIsAuth  // 로그인 결과를 리턴한다\r\n    }\r\n}"],"mappings":"AAAA,SAAQA,OAAO,EAAEC,OAAO,EAAEC,WAAW,QAAO,kBAAkB;AAC9D,OAAOC,QAAQ,MAAM,qBAAqB;AAE1C,IAAIC,SAAS,GAAGA,CAAC;EAACC;AAAM,CAAC,EAAEC,IAAI,KAAK;EAChCD,MAAM,CAACL,OAAO,EAAEM,IAAI,CAAC;AACzB,CAAC;AAED,IAAIC,aAAa,GAAGA,CAAC;EAACF;AAAM,CAAC,EAAEC,IAAI,KAAK;EACpCD,MAAM,CAACH,WAAW,EAAEI,IAAI,CAAC;AAC7B,CAAC;AAED,IAAIE,SAAS,GAAGA,CAAC;EAACH;AAAM,CAAC,EAAEC,IAAI,KAAK;EAChCD,MAAM,CAACJ,OAAO,EAAEK,IAAI,CAAC;AACzB,CAAC;;AAED;AACA,IAAIG,eAAe,GAAGA,CAACC,KAAK,EAAEC,aAAa,KAAK;EAC5C,QAAQA,aAAa;IACjB,KAAK,UAAU;MACXJ,aAAa,CAACG,KAAK,EAAE,sBAAsB,CAAC;MAC5CF,SAAS,CAACE,KAAK,EAAE,KAAK,CAAC;MACvB;IACJ;MACIN,SAAS,CAACM,KAAK,EAAEC,aAAa,CAACC,OAAO,CAAC;MACvCL,aAAa,CAACG,KAAK,EAAE,EAAE,CAAC;MACxBF,SAAS,CAACE,KAAK,EAAE,IAAI,CAAC;EAAA;AAElC,CAAC;AAED,eAAe;EACX,MAAMG,KAAKA,CAAEH,KAAK,EAAE;IAACE,OAAO;IAAEE;EAAO,CAAC,EAAE;IACpC,IAAIH,aAAa,GAAG,MAAMR,QAAQ,CAACY,OAAO,CAACH,OAAO,EAAEE,OAAO,CAAC;IAC5DL,eAAe,CAACC,KAAK,EAAEC,aAAa,CAAC;IACrC,OAAOD,KAAK,CAACM,OAAO,CAACC,SAAS,EAAE;EACpC;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}