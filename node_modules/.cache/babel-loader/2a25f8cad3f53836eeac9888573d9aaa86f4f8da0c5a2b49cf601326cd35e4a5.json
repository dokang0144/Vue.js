{"ast":null,"code":"import \"core-js/modules/web.dom-exception.stack.js\";\nexport default {\n  computed: {\n    isAuthenticated() {\n      // JWT 토큰이 있으면 인증된 사용자로 간주합니다.\n      return localStorage.getItem('user_token') != null;\n    },\n    username() {\n      // JWT 토큰에서 사용자 이름을 추출합니다.\n      const token = localStorage.getItem('user_token');\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      return payload.user - name;\n    }\n  },\n  methods: {\n    logout() {\n      // 로컬 스토리지에서 JWT 토큰을 제거합니다.\n      localStorage.removeItem('user_token');\n      location.reload();\n    }\n  }\n};","map":{"version":3,"names":["computed","isAuthenticated","localStorage","getItem","username","token","payload","JSON","parse","atob","split","user","name","methods","logout","removeItem","location","reload"],"sources":["C:\\Users\\LENOVO\\Documents\\GitHub\\Vue.js\\src\\components\\PageHeader.vue"],"sourcesContent":["<template>\r\n  <header style=\"-webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none;\">\r\n    <div id=\"nav\">\r\n      <router-link to=\"/\">Home</router-link> |\r\n      <router-link to=\"/about\">About</router-link> |\r\n      <router-link to=\"/board/list\">게시판</router-link> |\r\n      <router-link to=\"/login\" v-if=\"!isAuthenticated\">로그인</router-link>\r\n      <b v-if=\"isAuthenticated\">{{ user_name }}</b>\r\n      <a v-if=\"isAuthenticated\" style=\"text-decoration-line: underline; cursor: pointer;\" @click=\"logout\">로그아웃</a>\r\n      <a v-if=\"!isAuthenticated\"> | </a>\r\n      <router-link to=\"/signup\" v-if=\"!isAuthenticated\">회원가입</router-link>\r\n    </div>\r\n  </header>\r\n  <hr/>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  computed: {\r\n    isAuthenticated() {\r\n      // JWT 토큰이 있으면 인증된 사용자로 간주합니다.\r\n      return localStorage.getItem('user_token') != null;\r\n    },\r\n    username() {\r\n      // JWT 토큰에서 사용자 이름을 추출합니다.\r\n      const token = localStorage.getItem('user_token');\r\n      const payload = JSON.parse(atob(token.split('.')[1]));\r\n      return payload.user-name;\r\n    },\r\n  },\r\n  methods: {\r\n    logout() {\r\n      // 로컬 스토리지에서 JWT 토큰을 제거합니다.\r\n      localStorage.removeItem('user_token');\r\n      location.reload();\r\n    },\r\n  },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>"],"mappings":";AAiBA,eAAe;EACbA,QAAQ,EAAE;IACRC,eAAeA,CAAA,EAAG;MAChB;MACA,OAAOC,YAAY,CAACC,OAAO,CAAC,YAAY,KAAK,IAAI;IACnD,CAAC;IACDC,QAAQA,CAAA,EAAG;MACT;MACA,MAAMC,KAAI,GAAIH,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;MAChD,MAAMG,OAAM,GAAIC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACJ,KAAK,CAACK,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACrD,OAAOJ,OAAO,CAACK,IAAI,GAACC,IAAI;IAC1B;EACF,CAAC;EACDC,OAAO,EAAE;IACPC,MAAMA,CAAA,EAAG;MACP;MACAZ,YAAY,CAACa,UAAU,CAAC,YAAY,CAAC;MACrCC,QAAQ,CAACC,MAAM,EAAE;IACnB;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}